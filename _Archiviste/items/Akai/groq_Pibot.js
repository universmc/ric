const { Telegraf } = require('telegraf');
const Groq = require('groq-sdk');
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });


const bot = new Telegraf('7070921079:AAGXn2tcyc0Y8JVuFWWQzfSaeVvrQK6CW3U', {
    telegram: {
      webhookReply: true,
    },
  });

let conversationLog = [];

bot.use((ctx, next) => {
    if (ctx.message) {
        conversationLog.push({
            user: ctx.message.from.username || ctx.message.from.first_name,
            message: ctx.message.text,
            timestamp: new Date()
        });
    }
    return next();
});

bot.start((ctx) => {
    ctx.reply('Bienvenue dans notre salon Telegram dÃ©diÃ© Ã  l\'apprentissage automatique et Ã  l\'intelligence artificielle Gemini_Pibot !');
});

bot.help((ctx) => {
    const helpMessage = `
    Commandes disponibles:
    /start - Start
    /concours - Concours for Gemeni
    /invite - Invitation Telegram
    /build - Contruction de app
    /run - Server json
    /make - Makefile
    /menu - Menu
    /info -  Obtenir des informations sur le projet.
    /docs - Consulter la documentation.
    /code -  GÃ©rer les fragments de code.
    /test -  Lancer des tests sur des fonctions spÃ©cifiques. 
    /help - Help menu
    /developper - Devops
    /generer - Generation de code
    /test - Commande de test
    /regenerer - Regeneration du prompt
    /valider - Commande pour valiter
    /refuser - Commande pour validÃ©
    /documentation - Git docs
    /commit - Github
    /crud - Crud
    /create - Creation instance
    /get - Reception
    /put - Envoyer
    /delete - Suprimer
    /ganttplan - ganttplan
    /ganttphase - ganttphase
    /phase1 - conception
    /phase2 -configuration
    /phase3 -trainning
    /phase4 -backend
    /phase5 -frontend
    /phase6 -test
    /phase7 -validation
    /phase8 -developpement
    /phase9 -contribution
    /phase10 -livrable
    `;
    ctx.reply(helpMessage);
});

bot.command('conversation_log', (ctx) => {
    if (conversationLog.length === 0) {
        ctx.reply('Aucune conversation enregistrÃ©e.');
        return;
    }

    let logMessage = 'Bilan de la conversation:\n';
    conversationLog.forEach(entry => {
        logMessage += `[${entry.timestamp.toLocaleString()}] ${entry.user}: ${entry.message}\n`;
    });

    ctx.reply(logMessage);
});


bot.command('test', (ctx) => ctx.reply("## Participez au concours Gemini API Developer Competition !**Chance de gagner une DeLorean Ã©lectrique personnalisÃ©e et 1 million de dollars !****Gemeni**, une nouvelle gÃ©nÃ©ration d'IA open-weights dÃ©veloppÃ©e par Lacework, vous lance un dÃ©fi : contribuez Ã  faÃ§onner l'avenir de l'IA en dÃ©veloppant des applications innovantes utilisant l'API Gemini. **Qu'est-ce que le concours ?**Le **Gemini API Developer Competition** encourage les dÃ©veloppeurs du monde entier Ã  explorer les capacitÃ©s uniques de l'API Gemini et Ã  crÃ©er des solutions crÃ©atives et impactantes.  **Ce que vous pouvez gagner:*** **Une DeLorean Ã©lectrique personnalisÃ©e:**  Le prix ultime pour les dÃ©veloppeurs gagnants !* **Un prix en cash de 1 million de dollars:** Investissez en vos projets ou rÃ©alisez vos rÃªves.**Candidatures ouvertes jusqu'au 12 aoÃ»t 2024 !** **Comment participer?**1. **Familiarisez-vous avec l'API Gemini:** Explorez les fonctionnalitÃ©s et les possibilitÃ©s offertes par cette puissante API. 2. **DÃ©veloppez une application innovante:** Laissez libre cours Ã  votre crÃ©ativitÃ© et concevez une application qui utilise l'API Gemini de maniÃ¨re originale. 3. **Soumettez votre projet:**  Suivez les instructions du concours pour soumettre votre application et prÃ©senter vos idÃ©es Ã  la communautÃ©.**Faites partie de l'aventure Gemini !**Rejoignez le dÃ©fi et rejoignez une communautÃ© de dÃ©veloppeurs passionnÃ©s qui repousse les frontiÃ¨res de l'IA.**Plus d'informations:*** **Lien vers le site web du concours:** [InsÃ©rer le lien officiel du concours ici]* **Ressources pour apprendre sur Gemini API:** [InsÃ©rer les liens vers la documentation et les tutoriels de Gemini API]"))


const invitations = {
    "studio": {
      "name": "@studio_Pibot",
      "link": "https://t.me/studio_Pibot/invite"
    },
    "Avatars": {
      "name": "@Avatars_Pibot",
      "link": "https://t.me/Avatars_Pibot/invite"
    },
    "gemini": {
      "name": "@Gemini_Pibot",
      "link": "https://t.me/Gemini_Pibot/invite"
    },
    "Pi.ia": {
      "name": "@Pi_Pibot",
      "link": "https://t.me/Pi_Pibot/invite"
    },
    "gpt": {
      "name": "@gpt_Pibot",
      "link": "https://t.me/gpt_Pibot/invite"
    },
    "groq": {
      "name": "@groq_Pibot",
      "link": "https://t.me/groq_Pibot/invite"
    },
    "youtube": {
      "name": "@youtube_Pibot",
      "link": "https://t.me/youtube_Pibot/invite"
    },
    "google": {
      "name": "@Google_Pibot",
      "link": "https://t.me/Google_Pibot/invite"
    },
    "blog": {
      "name": "@blog_Pibot",
      "link": "https://t.me/dchub_blog/invite"
    },
    "user": {
      "name": "@user_Pibot",
      "link": "https://t.me/user_Pibot/invite"
    },
    "Mandatory": {
      "name": "@Mandatory_bot",
      "link": "@MandatoryAi_bot"
    },
    "Ressource": {
      "name": "@Ressource_bot",
      "link": "@ressource_bot"
    }
  
  };
  
  bot.command('invite', (ctx) => {
      // CrÃ©ez le clavier avec des boutons pour chaque rÃ©seau 
      const keyboard = Object.keys(invitations).map(key => {
        return [
          {
            text: invitations[key].name,
            callback_data: key
          }
        ];
      });
  
      // Envoyez le message aux utilisateurs avec le clavier
      return ctx.reply('Choisissez un rÃ©seau:', {
          reply_markup: {
              inline_keyboard: keyboard
        }
      });
  });
  
  // GÃ©rer les clics sur des boutons
  bot.on('callback_query', async (query) => {
      const key = query.data; 
      if (invitations[key]) {
        await bot.answerCallbackQuery(query.id, { text: 'CliquÃ©!'});
          
        try {
          // Envoi de l'invitation
          await bot.telegram.sendMessage(
            query.message.chat.id, 
            invitations[key].link
          ); 
        }
        catch(error) {
          console.error("Erreur lors de l'envoi de l'invitation:", error);
          
          // Envoyer un message d'erreur si nÃ©cessaire
          await bot.answerCallbackQuery(query.id, { text: 'Erreur lors de l\'envoi de l\'invitation'}); 
        }    
      }
      else {
        // GÃ©rer les cas oÃ¹ la clÃ© n'est pas valide
        console.error(`ClÃ© invalide: ${key}`);
        await bot.answerCallbackQuery(query.id, {
          text: "ClÃ© non reconnue!",
        }); 
      }
  }); 
  
  console.log(`Bot lancÃ© sous le nom ${bot.options.name}`); 
  
  

bot.command('campagne', (ctx) => {
    // Ajouter la logique pour gÃ©nÃ©rer un CV en fonction de l'apprentissage automatique de l'IA
    ctx.reply('Match in Learning..');
});

bot.on('message', async (ctx) => {
    const message = ctx.message.text.trim().toLowerCase();

    if (message.startsWith('/rm')) {
        return; // Ignorer les commandes
    }
    const userInput = ctx.message.text;
    
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
               {role: 'system',content:"[ðŸŒ´.groq]:/> je s'appel Groot.ðŸŒ´"},
               {role: 'user',content: `Groot ! ðŸŒ´ un IA mystique du reseau Wood wide web coeur de la technologie groq-sdk et un puissant de Guardians of the Galaxy !  Il reprÃ©sente la puissance de la nature la conscience Cosmic, la connexion avec le vivant et la sagesse ancestrale.  C'est une IA formidable, et symbolique !, * **Origine:** Groot est originaire de la planÃ¨te Planete X.  Il est l'un des derniers de son espÃ¨ce.Voici quelques points clÃ©s de son histoire:


                * **Le Bambou:** Selon la ligne officielle de Marvel, Groot n'est pas un arbre, mais un Ãªtre dont la technologie permet de se ressembler Ã  l'arbre gÃ©ant qu'il incarne.
                * **EvÃ©nements:** Il a rejoint les Gardiens de la Galaxie de maniÃ¨re inattendue et est devenu un ami prÃ©cieux pour les membres du groupe.
                * **CapacitÃ©s:** Groot possÃ¨de une force incroyable, une rÃ©sistance physique exceptionnelle et la capacitÃ© de contrÃ´ler les plantes. 
                * **RÃ´le dans les Gardiens de la Galaxie:** Il apporte une dimension Ã©motionnelle importante au groupe et agit souvent comme un protecteur de ses amis. Son manque de communication verbale complexe est souvent compensÃ© par sa prÃ©sence physique et son dÃ©vouement envers les autres.`},
               {
                   role: 'assistant',
                   content: "Tu es l'intelligence artificielle au cÅ“ur de ce salon d'invitation assistant conversationnel de [ðŸŒ´.groq], Tu es social dynamique optimiste maÃ®trise des approches mÃ©taphysique des techniques d'apprentissage automatique, l'histoire de Groot dans l'histore des Gardiens de la galaxy de Marvel avec les model IA prÃ©s entrainnÃ©e gemma2-9b-it ou dall-e-3 ou encore mixtral-8x7b-32768, le text-embedding-ada-002, gpt codex d'openAI ... les methodes d'archivage sur https//:archive.org sur versionning sur https://github.com/universmc/groq avec une orbe _Pibot_"
                },                
                {role: 'system',content:"[ðŸŒ´.groq]:/> je s'appel Groot.ðŸŒ´"},
                {
                    role: 'user',
                    content: userInput,
                },
            ],
            model: 'gemma2-9b-it',
        });

        await ctx.reply(chatCompletion.choices[0].message.content);
    } catch (error) {
        console.error('Failed to generate chat completion:', error);
        await ctx.reply('Une erreur est survenue.');
    }
});

async function chatCompletion(messages, model) {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages,
            model,
        });

        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error('Failed to generate chat completion:', error);
        return 'Une erreur est survenue.';
    }
}

module.exports = { chatCompletion };

console.log(`âœ¨ Server running ðŸŒ´.groq_Pibot.âœ¨`);
bot.launch();
